import java.io.*;
import java.util.*;

public class day15 {

    // moveStr matches move for indexing.
    private static final String moveStr = "^>v<";
    private static int[][] move = new int[][]{{-1,0}, {0,1}, {1,0}, {0,-1}};
    private static Set<String> walls = new HashSet<>();
    private static Set<String> boxes = new HashSet<>();
    private static int[] pos = new int[2];

    public static void main(String[] args) {
        List<String> file = new ArrayList<>();

        try {
            File myObj = new File("src/data/data15.txt");
            Scanner myReader = new Scanner(myObj);
            while (myReader.hasNextLine()) {
                file.add(myReader.nextLine());
            }
            myReader.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

        final long startTime = System.currentTimeMillis();
        int row = 0;

        while (!file.get(row).equals("")) {
            char[] line = file.get(row).toCharArray();

            for (int col = 0; col < line.length; col++) {
                switch (line[col]) {
                    case 'O':
                        boxes.add(int2str(row, col));
                        break;
                    case '#':
                        walls.add(int2str(row, col));
                        break;
                    case '@':
                        pos[0] = row;
                        pos[1] = col;
                        break;
                }
            }
            row++;
        }

        // Convert robots path to string of ints
        String path = file.get(file.size() - 1);

        for (char c : path.toCharArray()) {
            int dir = dirStr.indexOf(c);
            int space = 1;
            int nextR = pos[0] + move[dir][0];
            int nextC = pos[1] + move[dir][1];

            if (walls.contains(int2str(nextR, nextC))) {
                space = 0;
            } else if (boxes.contains(int2str(nextR, nextC))) {
                space = push(pos, dir);
            }

            pos[0] += (space * move[dir][0]);
            pos[1] += (space * move[dir][1]);
        }

        long sumGPS = 0L;

        for (String box : boxes) {
            int[] finalPos = str2int(box);
            sumGPS += (100 * finalPos[0]) + finalPos[1];
        }

        final long p1Time = System.currentTimeMillis();
        System.out.println("Part 1: " + sumGPS);
        System.out.println(p1Time - startTime + "ms");
    }

    public static String int2str(int x, int y) {
        StringBuilder sb = new StringBuilder();

        sb.append(x);
        sb.append(',');
        sb.append(y);

        return sb.toString();
    }

    public static int[] str2int(String s) {
        String[] sSplit = s.split(",");
        int x = Integer.parseInt(sSplit[0]);
        int y = Integer.parseInt(sSplit[1]);

        return new int[]{x, y};
    }

    // Returns if any space was created after boxes moved.
    public static int push(int[] pos, int dir) {

        List<int[]> nextBoxes = new ArrayList<>();
        int newR = pos[0], newC = pos[1], space = 1;
        
        while (space == 1) {
            newR += move[dir][0];
            newC += move[dir][1];
            String next = int2str(newR, newC);

            if (walls.contains(next)) {
                space = 0;
                break;
            } else if (boxes.contains(next)) {
                nextBoxes.add(str2int(next));
            } else {
                space = 2;
                break;
            }
        }

        if (space == 0) {
            return 0;
        }

        for (int b = nextBoxes.size() - 1; b >= 0; b--) {
            int[] boxPos = nextBoxes.get(b);

            boxes.remove(int2str(boxPos[0], boxPos[1]));

            boxPos[0] += move[dir][0];
            boxPos[1] += move[dir][1];

            boxes.add(int2str(boxPos[0], boxPos[1]));
        }

        return 1;
    }
}
