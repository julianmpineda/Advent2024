import java.io.*;
import java.util.*;

public class day12 {
    private static char[][] garden;
    private static Set<String> gardenVisited = new HashSet<>();
    private static int maxWidth, maxHeight;
    private static Map<String, Set<String>> tbEdges = new HashMap<>();
    private static Map<String, Set<String>> lrEdges = new HashMap<>();
    private static Map<String, Set<String>> tbRemoved = new HashMap<>();
    private static Map<String, Set<String>> lrRemoved = new HashMap<>();
    private static Map<String, Set<String>> area = new HashMap<>();

    public static void main(String[] args) {

        final long startTime = System.currentTimeMillis();
        List<String> file = new ArrayList<>();

        try {
            File myObj = new File("src/data/data12.txt");
            Scanner myReader = new Scanner(myObj);
            while (myReader.hasNextLine()) {
                file.add(myReader.nextLine());
            }
            myReader.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

        maxWidth = file.get(0).length();
        maxHeight = file.size();
        garden = new char[maxHeight][maxWidth];
        Map<String, Integer> plot = new HashMap<>();

        for (int s = 0; s < maxHeight; s++) {
            for (int t = 0; t < maxWidth; t++) {
                char c =  file.get(s).charAt(t);
                garden[s][t] = c;
            }
        }

        for (int i = 0; i < maxHeight; i++) {
            for (int j = 0; j < maxWidth; j++) {
                if (!gardenVisited.contains(int2str(i, j))) {
                    fill(i, j, garden[i][j], int2str(i, j));
                }
            }
        }
        int sum = 0;

        for (String s : area.keySet()) {
            sum += (area.get(s).size() * (lrEdges.get(s).size() + tbEdges.get(s).size()));
        }

        final long p1Time = System.currentTimeMillis();
        
        System.out.println("Part 1: " + sum);
        System.out.println((p1Time - startTime) + "ms");
    }

    public static int fill(int x, int y, char id, String head) {

        String xy = int2str(x, y);
        String yPlus = int2str(x, y + 1);
        String xPlus = int2str(x + 1, y);

        boolean top = false, bottom = false, left = false, right = false;

        gardenVisited.add(xy);
        area.putIfAbsent(head, new HashSet<>());
        area.get(head).add(xy);

        lrEdges.putIfAbsent(head, new HashSet<>());
        lrRemoved.putIfAbsent(head, new HashSet<>());

        if (!lrRemoved.get(head).contains(xy)) {
            lrEdges.get(head).add(xy);
        }
        if (!lrRemoved.get(head).contains(yPlus)) {
            lrEdges.get(head).add(yPlus);
        }

        tbEdges.putIfAbsent(head, new HashSet<>());
        tbRemoved.putIfAbsent(head, new HashSet<>());

        if (!tbRemoved.get(head).contains(xy)) {
            tbEdges.get(head).add(xy);
        }
        if (!tbRemoved.get(head).contains(xPlus)) {
            tbEdges.get(head).add(xPlus);
        }

        // North / Up
        if (x - 1 > -1) {
            if (garden[x - 1][y] == id) {
                tbEdges.get(head).remove(xy);
                tbRemoved.get(head).add(xy);
                top = !gardenVisited.contains(int2str((x-1), y));
            }
        }

        // East / Right
        if (y + 1 < maxWidth) {
            if (garden[x][y + 1] == id) {
                lrEdges.get(head).remove(yPlus);
                lrRemoved.get(head).add(yPlus);
                right = !gardenVisited. contains(yPlus);
            }
        }

        // South / Down
        if (x + 1 < maxHeight) {
            if (garden[x + 1][y] == id) {
                tbEdges.get(head).remove(xPlus);
                tbRemoved.get(head).add(xPlus);
                bottom = !gardenVisited.contains(xPlus);
            }
        }

        // West / Left
        if (y - 1 > -1) {
            if (garden[x][y - 1] == id) {
                lrEdges.get(head).remove(xy);
                lrRemoved.get(head).add(xy);
                left = !gardenVisited.contains(int2str(x, (y-1)));
            }
        }

        if (top) {
            fill(x - 1 , y, id, head);
        }

        if (bottom) {
            fill(x + 1 , y, id, head);
        }

        if (right) {
            fill(x, y + 1, id, head);
        }

        if (left) {
            fill(x, y - 1, id, head);
        }

        return -1;
    }

    public static String int2str(int x, int y) {
        StringBuilder sb = new StringBuilder();
        sb.append(x);
        sb.append(',');
        sb.append(y);
        return sb.toString();
    }
}
