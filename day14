import java.io.*;
import java.util.*;

public class day14v2 {

    private static char[][] map;
    private static int maxHeight = 103, maxWidth = 101;

    public static void main(String[] args) {

        List<String> file = new ArrayList<>();

        try {
            File myObj = new File("src/data/data14.txt");
            Scanner myReader = new Scanner(myObj);
            while (myReader.hasNextLine()) {
                file.add(myReader.nextLine());
            }
            myReader.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

        final long startTime = System.currentTimeMillis();

        //Pre-knowledge required here, only real cheat.
        int board = 0;
        long low = Long.MAX_VALUE;

        try {
            FileWriter myWriter = new FileWriter("src/data/day14out.txt");

            for (int s = 0; s < 10403; s++) {

                setMap();

                int[] quad = new int[4];
                long[] eigths = new long[8];

                /*
                Quad and Eights defined by index respectively:
                +-+-+    +-+-+
                |0|1|    |0|1|
                +-+-+    +-+-+
                |2|3|    |2|3|
                +-+-+    +-+-+
                         |4|5|
                         +-+-+
                         |6|7|
                         +-+-+
                */

                for (int t = 0; t < file.size(); t++) {

                    //Splits into 8 values since it splits at every non-digit. Filtered out with indexing.
                    String[] sTemp = file.get(t).split("[^0-9|-]");
                    int[] temp = new int[4];

                    temp[0] = Integer.parseInt(sTemp[2]);
                    temp[1] = Integer.parseInt(sTemp[3]);
                    temp[2] = Integer.parseInt(sTemp[6]);
                    temp[3] = Integer.parseInt(sTemp[7]);

                    int moveX = temp[2] * s;
                    int moveY = temp[3] * s;

                    int[] point = new int[2];

                    point[0] = ((temp[0] + moveX) % 101 + 101) % 101;
                    point[1] = ((temp[1] + moveY) % 103 + 103) % 103;

                    if (point[1] != 25 && point[1] != 51 && point[1] != 77 && point[0] != 51) {
                        map[point[1]][point[0]] = '0';
                    }

                    if (s == 100) {
                        if (point[0] < 50 && point[1] < 51) {
                            quad[0]++;
                        } else if (point[0] < 50 && point[1] > 51) {
                            quad[1]++;
                        } else if (point[0] > 50 && point[1] < 51) {
                            quad[2]++;
                        } else if (point[0] > 50 && point[1] > 51) {
                            quad[3]++;
                        }
                    }

                    if (point[0] < 50 && point[1] < 25) {
                        eigths[0]++;
                    } else if (point[0] > 50 && point[1] < 25) {
                        eigths[1]++;
                    } else if (point[0] < 50  && point[1] > 25 && point[1] < 51) {
                        eigths[2]++;
                    } else if (point[0] > 50 && point[1] > 25 && point[1] < 51) {
                        eigths[3]++;
                    } else if (point[0] < 50 && point[1] > 51 && point[1] < 77) {
                        eigths[4]++;
                    } else if (point[0] > 50 && point[1] > 51 && point[1] < 77) {
                        eigths[5]++;
                    } else if (point[0] < 50 && point[1] > 77) {
                        eigths[6]++;
                    } else if (point[0] > 50 && point[1] > 77) {
                        eigths[7]++;
                    }
                }

                if (s == 100) {
                    long safetyFactor = quad[0] * quad[1] * quad[2] * quad[3];
                    System.out.println("Part 1: " + safetyFactor);
                }

                long safetyFactor = eigths[0] * eigths[1] * eigths[2] * eigths[3] * eigths[4] * eigths[5] * eigths[6] * eigths[7];

                if (safetyFactor < low) {
                    board = s;
                    low = safetyFactor;
                }

                myWriter.write("Positions at " + s + " seconds.\n");

                for (char[] c : map) {
                    myWriter.write(c);
                    myWriter.write("\n");
                }
            }
            myWriter.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

        final long endTime = System.currentTimeMillis();
        System.out.println("Part 2: Board " + board + " has lowest safety factor " + low);
        System.out.println((endTime - startTime) + "ms");
    }

    // Clears the map
    private static void setMap() {

        map = new char[maxHeight][maxWidth];

        for (char[] c : map) {
            Arrays.fill(c, '.');
        }

        for (int k = 0; k < 101; k++) {
            map[25][k] = ' ';
            map[51][k] = ' ';
            map[77][k] = ' ';
            map[k][51] = ' ';
        }
        map[101][51] = ' ';
        map[102][51] = ' ';
    }
}
