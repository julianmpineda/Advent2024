import java.util.*;
import java.io.*;

public class day14 {

    private static char[][] map;

    private static Map<String, List<String>> bots = new HashMap();
    private static List<String> bot = new ArrayList<>();
    private static List<String> velocity = new ArrayList<>();


    public static void main(String[] args) {

        final long startTime = System.currentTimeMillis();
        List<String> file = new ArrayList<>();

        try {
            File myObj = new File("src/data/data14.txt");
            Scanner myReader = new Scanner(myObj);
            while (myReader.hasNextLine()) {
                file.add(myReader.nextLine());
            }
            myReader.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

        int[] quad = new int[4];

        /*
          Quadrants defined by index:
            +-+-+
            |0|1|
            +-+-+
            |2|3|
            +-+-+
         */

        for (int i = 0; i < file.size(); i++) {
            //splits into a size 8 array, will just code out the unneeded cells.
            String[] sTemp = file.get(i).split("[^0-9|-]");
            int[] temp = new int[4];

            temp[0] = Integer.parseInt(sTemp[2]);
            temp[1] = Integer.parseInt(sTemp[3]);
            temp[2] = Integer.parseInt(sTemp[6]);
            temp[3] = Integer.parseInt(sTemp[7]);

            int moveX = temp[2] * 100;
            int moveY = temp[3] * 100;

            int[] point = new int[2];

            point[0] = ((temp[0] + moveX) % 101 + 101) % 101;
            point[1] = ((temp[1] + moveY) % 103 + 103) % 103;

            if (point[0] < 50 && point[1] < 51) {
                quad[0]++;
            } else if (point[0] < 50 && point[1] > 51) {
                quad[1]++;
            } else if (point[0] > 50 && point[1] < 51) {
                quad[2]++;
            } else if (point[0] > 50 && point[1] > 51) {
                quad[3]++;
            }
        }

        long safetyFactor = quad[0] * quad[1] * quad[2] * quad[3];

        final long p1Time = System.currentTimeMillis();
        System.out.println("Part 1: " + safetyFactor);
        System.out.println((p1Time - startTime) + "ms");

        // Part 2

        for (int i = 0; i < file.size(); i++) {
            //splits into a size 8 array, will just code out the unneeded cells.
            String[] sTemp = file.get(i).split("[^0-9|-]");
            int[] temp = new int[4];

            temp[0] = Integer.parseInt(sTemp[2]);
            temp[1] = Integer.parseInt(sTemp[3]);
            temp[2] = Integer.parseInt(sTemp[6]);
            temp[3] = Integer.parseInt(sTemp[7]);

            int[] start = new int[]{temp[0], temp[1]};
            int[] velocity = new int[]{temp[0], temp[1]};

            String name = int2bot(temp[0], temp[1], temp[2], temp[3]);

            if (bots.containsKey(name)) {
                System.out.println("dupe bot");
            }

            bots.putIfAbsent(name, new ArrayList<>());
            botRun(name, start, velocity);

        }

        int mapWidth;
        int mapHeight;

        if (file.size() < 100) {
            mapWidth = 11;
            mapHeight = 7;
        } else {
            mapWidth = 101;
            mapHeight = 103;
        }

        int loops = 0;

        for (String s : bots.keySet()) {
            loops = Math.max(loops, bots.get(s).size());
            if (bots.get(s).size() != 10403) {
                System.out.println(bots.get(s).size());
            }
        }

        int low = Integer.MAX_VALUE;
        int board = 0;

        try {
            FileWriter myWriter = new FileWriter("src/data/test.txt");

            for (int b = 0; b < loops * 3; b++) {

                map = new char[mapHeight][mapWidth];
                int[] sixths = new int[6];
                /*
                Sixths defined by index:
                    +-+-+-+
                    |0|1|2|
                    +-+-+-+
                    |3|4|5|
                    +-+-+-+
                */

                for (char[] c : map) {
                    Arrays.fill(c, '.');
                }

                for (String id : bots.keySet()) {
                    int[] point = str2int(bots.get(id).get(b % 100));
                    map[point[1]][point[0]] = '0';

                    if (point[0] < 33 && point[1] < 51) {
                        sixths[0]++;
                    } else if (point[0] > 33 && point[0] < 67 && point[1] > 51) {
                        sixths[1]++;
                    } else if (point[0] > 67 && point[1] < 51) {
                        sixths[2]++;
                    } else if (point[0] < 33 && point[1] > 51) {
                        sixths[3]++;
                    } else if (point[0] > 33 && point[0] < 67 && point[1] > 51) {
                        sixths[4]++;
                    } else if (point[0] > 67 && point[1] > 51) {
                        sixths[5]++;
                    }
                }

                int avgDiff = 0;
                int avgFull = 500/6;

                for (int i : sixths) {
                    avgDiff += i;
                }

                avgDiff /= 6;

                System.out.println(b + " board has difference " + (avgFull - avgDiff));
/*
                myWriter.write("Positions at " + b + " seconds.\n");

                for (char[] c : map) {
                    myWriter.write(c);
                    myWriter.write("\n");
                }
                */
            }

        myWriter.close();
    } catch(
    IOException e)

    {
        System.out.println("An error occurred.");
        e.printStackTrace();
    }

    final long p2Time = System.currentTimeMillis();
        System.out.println("Check file");
        System.out.println((p2Time -p1Time)+"ms");

}

    // Creates bot ID string made of initial position + velocity
    public static String int2bot(int one, int two, int three, int four) {
        StringBuilder sb = new StringBuilder();
        sb.append(one);
        sb.append(two);
        sb.append(three);
        sb.append(four);
        return sb.toString();
    }

    // Converts coordinate arrays into a String "x,y"
    public static String int2str(int[] i) {
        StringBuilder sb = new StringBuilder();
        sb.append(i[0]);
        sb.append(',');
        sb.append(i[1]);
        return sb.toString();
    }

    // Converts String "x,y" into a coordinate array
    public static int[] str2int(String s) {

        String[] sSplit = s.split(",");
        int one = Integer.parseInt(sSplit[0]);
        int two = Integer.parseInt(sSplit[1]);

        return new int[]{one, two};
    }

    // Brute force returns security bot position after 100 runs.
    public static void botRun(String name, int[] pos, int[] move) {

        while (!bots.get(name).contains(int2str(pos))) {
            bots.get(name).add(int2str(pos));
            pos[0] = ((pos[0] + move[0]) % 101 + 101) % 101;
            pos[1] = ((pos[1] + move[1]) % 103 + 103) % 103;
        }
    }

    private static void setMap(Map<String, List<String>> bots) {


    }
}
