import java.io.*;
import java.util.*;

public class day24 {
    private static Map<String, Integer> wires = new HashMap<>();
    private static Map<String, String> gateList = new HashMap<>();

    public static void main(String[] args) {

        final long startTime = System.currentTimeMillis();

        try {
            File myObj = new File("src/data/data24.txt");
            Scanner myReader = new Scanner(myObj);
            boolean preSplit = true;
            while (myReader.hasNextLine()) {

                String line = myReader.nextLine();

                if (line.equals("")) {
                    preSplit = false;
                    continue;
                }

                if (preSplit) {
                    String[] temp = line.split(": ");
                    wires.put(temp[0], Integer.parseInt(temp[1]));
                } else {
                    String[] temp = line.split(" -> ");
                    gateList.put(temp[1], temp[0]);
                }
            }
            myReader.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

        for (String gate : gateList.keySet()) {
            wires.put(gate, dive(gate));
        }

        int count = 0;
        long result = 0;
        String zGate = "z00";

        while(wires.keySet().contains(zGate)) {

            result += (wires.get(zGate) * (Math.pow(2, count)));
            count++;

            zGate = "z";
            if (count < 10) {
                zGate += "0";
            }
            zGate += count;

        }

        final long endTime = System.currentTimeMillis();
        System.out.println("Part 1: " + result);
        System.out.println((endTime-startTime) + "ms");
    }

    private static int dive(String wire) {

        int one, two;
        String[] eq = gateList.get(wire).split(" ");
        
        if (wires.keySet().contains(eq[0])) {
            one = wires.get(eq[0]);
        } else {
            one = dive(eq[0]);
        }

        if (wires.keySet().contains(eq[2])) {
            two = wires.get(eq[2]);
        } else {
            two = dive(eq[2]);
        }

        int ans = 0;

        switch(eq[1]) {
            case "AND":
                ans = one & two;
                break;
            case "OR":
                ans = one | two;
                break;
            case "XOR":
                ans = one ^ two;
        }

        return ans;
    }
}
